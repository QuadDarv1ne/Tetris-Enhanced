#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è Tetris Enhanced
====================================================

–û–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã –≤ –æ–¥–∏–Ω —Ñ–∞–π–ª:
- –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∑–∞–π–Ω–∞
- –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
- –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Å–∏—Å—Ç–µ–º—ã
- –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ä–µ–∂–∏–º—ã

–ó–∞–ø—É—Å–∫:
    python tetris_tests.py
    
–ò–ª–∏ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:
    python tetris_tests.py --test adaptive           # –¢–æ–ª—å–∫–æ –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π –¥–∏–∑–∞–π–Ω
    python tetris_tests.py --test resolution         # –¢–æ–ª—å–∫–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
    python tetris_tests.py --test dynamic            # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
    python tetris_tests.py --demo                    # –î–µ–º–æ-—Ä–µ–∂–∏–º
"""

import sys
import os
import argparse
import time

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –≥–ª–∞–≤–Ω–æ–º—É —Ñ–∞–π–ª—É
sys.path.append(os.path.dirname(__file__))

try:
    import pygame
    from tetris_enhanced import (
        AdvancedResponsiveDesign, 
        apply_resolution_change, 
        game_config
    )
    
    class TetrisTestSuite:
        """–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Tetris Enhanced"""
        
        def __init__(self):
            self.results = {}
            print("=== –ö–û–ú–ü–õ–ï–ö–°–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø TETRIS ENHANCED ===\n")
        
        def test_adaptive_design(self):
            """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∑–∞–π–Ω–∞"""
            print("üß™ –¢–ï–°–¢ 1: –£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∑–∞–π–Ω–∞")
            print("=" * 60)
            
            test_cases = [
                {"name": "–£–ª—å—Ç—Ä–∞-–≤—ã—Å–æ–∫–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ 4K", "width": 3840, "height": 2160, "dpi": 144.0},
                {"name": "–°–≤–µ—Ä—Ö—à–∏—Ä–æ–∫–∏–π 32:9", "width": 3840, "height": 1080, "dpi": 96.0},
                {"name": "–®–∏—Ä–æ–∫–∏–π 21:9", "width": 2560, "height": 1080, "dpi": 96.0},
                {"name": "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π 16:9 FHD", "width": 1920, "height": 1080, "dpi": 96.0},
                {"name": "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π 4:3", "width": 1024, "height": 768, "dpi": 96.0},
                {"name": "–ú–∞–ª—ã–π —ç–∫—Ä–∞–Ω", "width": 800, "height": 600, "dpi": 96.0}
            ]
            
            test_results = []
            
            for test_case in test_cases:
                print(f"\nüì± {test_case['name']} ({test_case['width']}x{test_case['height']})")
                print("-" * 50)
                
                try:
                    responsive = AdvancedResponsiveDesign(
                        test_case['width'], 
                        test_case['height'], 
                        test_case['dpi']
                    )
                    
                    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                    print(f"  –ö–ª–∞—Å—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {responsive.device_class}")
                    print(f"  –¢–∏–ø —ç–∫—Ä–∞–Ω–∞: {responsive.aspect_type}")
                    print(f"  –ö–∞—Ç–µ–≥–æ—Ä–∏—è DPI: {responsive.dpi_category}")
                    
                    # –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
                    font_scale = responsive.scale_factors['font']
                    ui_scale = responsive.scale_factors['ui']
                    print(f"  –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ —à—Ä–∏—Ñ—Ç–æ–≤: {font_scale:.2f}x")
                    print(f"  –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ UI: {ui_scale:.2f}x")
                    
                    # –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–∞–∑–º–µ—Ä—ã
                    font_24 = responsive.scale_font(24)
                    button_h = responsive.get_button_height()
                    margin = responsive.get_margin(20)
                    
                    print(f"  –®—Ä–∏—Ñ—Ç 24px ‚Üí {font_24}px")
                    print(f"  –í—ã—Å–æ—Ç–∞ –∫–Ω–æ–ø–∫–∏ ‚Üí {button_h}px")
                    print(f"  –û—Ç—Å—Ç—É–ø 20px ‚Üí {margin}px")
                    
                    # –ò–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ
                    origin_x, origin_y, field_w, field_h, block_size = responsive.get_grid_position()
                    print(f"  –ò–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ: {field_w}x{field_h}, –±–ª–æ–∫ {block_size}px")
                    
                    # –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
                    perf = responsive.get_performance_settings()
                    print(f"  –ö–∞—á–µ—Å—Ç–≤–æ —Ä–µ–Ω–¥–µ—Ä–∞: {perf['render_quality']}")
                    print(f"  –¶–µ–ª–µ–≤–æ–π FPS: {perf['fps_target']}")
                    
                    test_results.append({"name": test_case['name'], "status": "‚úÖ –£–°–ü–ï–•", "error": None})
                    
                except Exception as e:
                    print(f"  ‚ùå –û–®–ò–ë–ö–ê: {e}")
                    test_results.append({"name": test_case['name'], "status": "‚ùå –û–®–ò–ë–ö–ê", "error": str(e)})
            
            # –ò—Ç–æ–≥–∏
            success_count = sum(1 for r in test_results if "‚úÖ" in r['status'])
            print(f"\nüìä –ò–¢–û–ì–ò –¢–ï–°–¢–ê –ê–î–ê–ü–¢–ò–í–ù–û–ì–û –î–ò–ó–ê–ô–ù–ê:")
            print(f"   –£—Å–ø–µ—à–Ω–æ: {success_count}/{len(test_results)} —Ç–µ—Å—Ç–æ–≤")
            
            if success_count == len(test_results):
                print("   üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
            
            self.results['adaptive_design'] = test_results
            return success_count == len(test_results)
        
        def test_resolution_system(self):
            """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π"""
            print("\nüñ•Ô∏è  –¢–ï–°–¢ 2: –°–∏—Å—Ç–µ–º–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π —ç–∫—Ä–∞–Ω–∞")
            print("=" * 60)
            
            try:
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
                filtered_resolutions = game_config.get_filtered_resolutions()
                
                print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π:")
                print(f"   –í—Å–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ: {len(filtered_resolutions)} —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π")
                print(f"   –¢–µ–∫—É—â–µ–µ: {game_config.screen_width}x{game_config.screen_height}")
                print(f"   –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω: {game_config.get_aspect_ratio():.2f}")
                
                print(f"\nüìù –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è:")
                for i, (w, h) in enumerate(filtered_resolutions, 1):
                    ratio = w / h
                    if abs(ratio - 16/9) < 0.1:
                        aspect = "16:9"
                    elif abs(ratio - 21/9) < 0.1:
                        aspect = "21:9"
                    elif abs(ratio - 4/3) < 0.1:
                        aspect = "4:3"
                    elif abs(ratio - 16/10) < 0.1:
                        aspect = "16:10"
                    else:
                        aspect = f"{ratio:.2f}:1"
                    print(f"   {i:2d}. {w}x{h} ({aspect})")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
                valid_count = 0
                for w, h in filtered_resolutions:
                    if w >= 800 and h >= 600:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
                        valid_count += 1
                
                print(f"\n‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
                print(f"   –í–∞–ª–∏–¥–Ω—ã—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π: {valid_count}/{len(filtered_resolutions)}")
                print(f"   –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è —Å–æ–±–ª—é–¥–µ–Ω—ã: {'‚úÖ' if valid_count > 0 else '‚ùå'}")
                
                self.results['resolution_system'] = {
                    'total_resolutions': len(filtered_resolutions),
                    'valid_resolutions': valid_count,
                    'current_resolution': (game_config.screen_width, game_config.screen_height),
                    'status': '‚úÖ –£–°–ü–ï–•' if valid_count > 0 else '‚ùå –û–®–ò–ë–ö–ê'
                }
                
                return valid_count > 0
                
            except Exception as e:
                print(f"‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π: {e}")
                self.results['resolution_system'] = {'status': '‚ùå –û–®–ò–ë–ö–ê', 'error': str(e)}
                return False
        
        def test_dynamic_resolution(self):
            """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ç–µ—Å—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è"""
            print("\nüîÑ –¢–ï–°–¢ 3: –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è")
            print("=" * 60)
            
            try:
                pygame.init()
                pygame.display.set_caption('–¢–µ—Å—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è - Tetris Enhanced')
                
                # –ù–∞–±–æ—Ä —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
                test_resolutions = [
                    (800, 600, "–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ 4:3"),
                    (1024, 768, "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ 4:3"),
                    (1280, 720, "HD 16:9"),
                    (1366, 768, "–ü–æ–ø—É–ª—è—Ä–Ω–æ–µ 16:9"),
                    (1600, 900, "–í—ã—Å–æ–∫–æ–µ 16:9"),
                    (1920, 1080, "Full HD 16:9")
                ]
                
                print("üéÆ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º:")
                print("   –ü–†–û–ë–ï–õ - –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ")
                print("   ESC - –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ—Å—Ç")
                print("   –ù–∞–±–ª—é–¥–∞–π—Ç–µ –∑–∞ –∞–¥–∞–ø—Ç–∞—Ü–∏–µ–π —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞\n")
                
                current_index = 0
                screen = pygame.display.set_mode(test_resolutions[current_index][:2])
                clock = pygame.time.Clock()
                
                # –°–æ–∑–¥–∞–µ–º —à—Ä–∏—Ñ—Ç—ã
                font = pygame.font.SysFont('arial,segoeui,helvetica', 24, bold=True)
                small_font = pygame.font.SysFont('arial,segoeui,helvetica', 16)
                
                print(f"üöÄ –ù–∞—á–∞–ª—å–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ: {test_resolutions[current_index][2]}")
                
                test_count = 0
                running = True
                
                while running and test_count < 10:  # –ú–∞–∫—Å–∏–º—É–º 10 –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–π –¥–ª—è –¥–µ–º–æ
                    dt = clock.tick(60) / 1000.0
                    
                    for event in pygame.event.get():
                        if event.type == pygame.QUIT:
                            running = False
                        elif event.type == pygame.KEYDOWN:
                            if event.key == pygame.K_ESCAPE:
                                running = False
                            elif event.key == pygame.K_SPACE:
                                # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
                                current_index = (current_index + 1) % len(test_resolutions)
                                new_resolution = test_resolutions[current_index][:2]
                                
                                print(f"üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞: {test_resolutions[current_index][2]} ({new_resolution[0]}x{new_resolution[1]})")
                                
                                # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–æ–≤–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
                                new_screen = apply_resolution_change(screen, new_resolution)
                                if new_screen:
                                    screen = new_screen
                                    test_count += 1
                                    print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ: {screen.get_size()}")
                                else:
                                    print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è")
                    
                    # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
                    screen.fill((25, 30, 40))
                    
                    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–∏
                    current_res = screen.get_size()
                    res_text = font.render(f"–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: {current_res[0]}x{current_res[1]}", True, (255, 255, 255))
                    screen.blit(res_text, (20, 20))
                    
                    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏
                    if 'responsive' in globals() and globals()['responsive']:
                        responsive = globals()['responsive']
                        y_offset = 60
                        texts = [
                            f"–ö–ª–∞—Å—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {responsive.device_class}",
                            f"–¢–∏–ø —ç–∫—Ä–∞–Ω–∞: {responsive.aspect_type}",
                            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è DPI: {responsive.dpi_category}",
                            f"–ú–∞—Å—à—Ç–∞–± —à—Ä–∏—Ñ—Ç–æ–≤: {responsive.scale_factors['font']:.2f}x",
                            f"–ú–∞—Å—à—Ç–∞–± UI: {responsive.scale_factors['ui']:.2f}x"
                        ]
                        
                        for text in texts:
                            text_surface = small_font.render(text, True, (200, 220, 240))
                            screen.blit(text_surface, (20, y_offset))
                            y_offset += 22
                    
                    # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                    instr_text = small_font.render("–ü–†–û–ë–ï–õ - –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å | ESC - –≤—ã—Ö–æ–¥", True, (150, 170, 200))
                    screen.blit(instr_text, (20, current_res[1] - 60))
                    
                    count_text = small_font.render(f"–¢–µ—Å—Ç–æ–≤: {test_count}/10 | –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ {current_index + 1}/{len(test_resolutions)}", True, (100, 150, 200))
                    screen.blit(count_text, (20, current_res[1] - 40))
                    
                    pygame.display.flip()
                
                pygame.quit()
                
                print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
                print(f"   –í—ã–ø–æ–ª–Ω–µ–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–π: {test_count}")
                print(f"   –¢–µ—Å—Ç {'‚úÖ –£–°–ü–ï–®–ï–ù' if test_count > 0 else '‚ùå –ù–ï –ó–ê–í–ï–†–®–ï–ù'}")
                
                self.results['dynamic_resolution'] = {
                    'switches_performed': test_count,
                    'status': '‚úÖ –£–°–ü–ï–•' if test_count > 0 else '‚ùå –ù–ï –ó–ê–í–ï–†–®–ï–ù'
                }
                
                return test_count > 0
                
            except Exception as e:
                print(f"‚ùå –û–®–ò–ë–ö–ê –≤ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–º —Ç–µ—Å—Ç–µ: {e}")
                self.results['dynamic_resolution'] = {'status': '‚ùå –û–®–ò–ë–ö–ê', 'error': str(e)}
                return False
        
        def run_demo_mode(self):
            """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ä–µ–∂–∏–º - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏"""
            print("\nüé™ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–û–ù–ù–´–ô –†–ï–ñ–ò–ú")
            print("=" * 60)
            print("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π —Å–∏—Å—Ç–µ–º—ã...")
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
            demo_configs = [
                {"width": 1920, "height": 1080, "name": "Full HD Gaming"},
                {"width": 2560, "height": 1440, "name": "2K Gaming"},
                {"width": 3440, "height": 1440, "name": "Ultrawide Gaming"},
                {"width": 1024, "height": 768, "name": "Retro 4:3"}
            ]
            
            for i, config in enumerate(demo_configs, 1):
                print(f"\nüé¨ –î–µ–º–æ {i}/{len(demo_configs)}: {config['name']}")
                print("-" * 40)
                
                try:
                    responsive = AdvancedResponsiveDesign(config['width'], config['height'])
                    
                    print(f"   üì± –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {responsive.device_class}")
                    print(f"   üìê –≠–∫—Ä–∞–Ω: {responsive.aspect_type}")
                    print(f"   üîç DPI: {responsive.dpi_category}")
                    print(f"   üìè –ú–∞—Å—à—Ç–∞–±—ã: UI {responsive.scale_factors['ui']:.2f}x, –®—Ä–∏—Ñ—Ç {responsive.scale_factors['font']:.2f}x")
                    
                    # –ò–º–∏—Ç–∞—Ü–∏—è –∏–≥—Ä–æ–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
                    font_size = responsive.scale_font(24)
                    button_height = responsive.get_button_height()
                    margin = responsive.get_margin(20)
                    
                    origin_x, origin_y, field_w, field_h, block_size = responsive.get_grid_position()
                    
                    print(f"   üéÆ –ò–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ: {field_w}x{field_h} (–±–ª–æ–∫ {block_size}px)")
                    print(f"   üîò –ö–Ω–æ–ø–∫–∏: –≤—ã—Å–æ—Ç–∞ {button_height}px")
                    print(f"   üìù –®—Ä–∏—Ñ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: {font_size}px")
                    
                    time.sleep(0.5)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏
                    
                except Exception as e:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ –≤ –¥–µ–º–æ: {e}")
            
            print(f"\nüéâ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!")
        
        def run_all_tests(self):
            """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã"""
            print("üß™ –ó–ê–ü–£–°–ö –í–°–ï–• –¢–ï–°–¢–û–í")
            print("=" * 60)
            
            results = []
            
            # –¢–µ—Å—Ç 1: –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –¥–∏–∑–∞–π–Ω
            results.append(self.test_adaptive_design())
            
            # –¢–µ—Å—Ç 2: –°–∏—Å—Ç–µ–º–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
            results.append(self.test_resolution_system())
            
            # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
            print(f"\nüìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
            print("=" * 60)
            
            success_count = sum(results)
            total_tests = len(results)
            
            print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {success_count}/{total_tests}")
            print(f"‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {total_tests - success_count}/{total_tests}")
            
            if success_count == total_tests:
                print(f"\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
                print("   –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
            else:
                print(f"\n‚ö†Ô∏è  –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–ô–î–ï–ù–´")
                print("   –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞")
            
            # –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            print(f"\nüìä –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
            for test_name, test_result in self.results.items():
                print(f"   {test_name}: {test_result.get('status', 'N/A')}")
            
            return success_count == total_tests

    def main():
        """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
        parser = argparse.ArgumentParser(description='–°–∏—Å—Ç–µ–º–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Tetris Enhanced')
        parser.add_argument('--test', choices=['adaptive', 'resolution', 'dynamic'], 
                          help='–ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–µ—Å—Ç')
        parser.add_argument('--demo', action='store_true', 
                          help='–ó–∞–ø—É—Å—Ç–∏—Ç—å –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ä–µ–∂–∏–º')
        
        args = parser.parse_args()
        
        test_suite = TetrisTestSuite()
        
        if args.demo:
            test_suite.run_demo_mode()
        elif args.test == 'adaptive':
            test_suite.test_adaptive_design()
        elif args.test == 'resolution':
            test_suite.test_resolution_system()
        elif args.test == 'dynamic':
            test_suite.test_dynamic_resolution()
        else:
            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∑–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã (–∫—Ä–æ–º–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ)
            test_suite.run_all_tests()
            
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ç–µ—Å—Ç
            print(f"\nüí° –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û:")
            print("   –î–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è:")
            print("   python tetris_tests.py --test dynamic")

    if __name__ == "__main__":
        main()
        
except ImportError as e:
    print(f"–û–®–ò–ë–ö–ê –ò–ú–ü–û–†–¢–ê: {e}")
    print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ pygame —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ tetris_enhanced.py –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ç–æ–π –∂–µ –ø–∞–ø–∫–µ.")
    print("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ pygame: pip install pygame")